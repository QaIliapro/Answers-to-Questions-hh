-----------------------------------------------------------------------------------------------------------------------------------------
Какое основное отличие REST от SOAP, которое влияет на выбор между ними при разработке легковесных и масштабируемых веб-сервисов?

Варианты ответа:

REST требует строго определённой контракт через WSDL, а SOAP этого не требует.
SOAP обеспечивает более простую масштабируемость за счёт использования статистических методов.
REST не поддерживает методы HTTP, такие как GET, POST, PUT и DELETE.
REST использует более простой и лёгкий протокол HTTP и не требует сложных стандартов обмена сообщениями.
SOAP поддерживает только формат данных JSON, тогда как REST поддерживает только XML.

Ответ REST использует более простой и лёгкий протокол HTTP и не требует сложных стандартов обмена сообщениями.
-----------------------------------------------------------------------------------------------------------------------------------------
Вы используете Swagger для документирования своего RESTful API. Вам нужно представить разработчикам возможности интегративного тестирования API прямо из документации. Какую функцию Swagger вы можете использовать для достижения этой цели?

Варианты ответа:

Интегрировать Swagger с Postman для удобного импорта конечных точек и тестирования API прямо из документации.
Генерировать статические HTML-страницы с описанием API и необходимыми примерами.
Экспортировать спецификацию API в формате PDF для удобного его распространения.
Использовать Swagger Codegen для создания полных клиентских библиотек API.
Использовать Swagger UI для создания интерактивной документации с возможностью тестирования запросов.

Правильный ответ:
Использовать Swagger UI для создания интерактивной документации с возможностью тестирования запросов.
-----------------------------------------------------------------------------------------------------------------------------------------
При разработке защищённого API вы рассматриваете использование Basic Authentication или OAuth 2.0. Какое ключевое преимущество OAuth 2.0 будет для вас самым значимым по сравнению с Basic Authentication в контексте безопасности и управления доступом?

Варианты ответа:

Проще реализуем, не требует дополнительной настройки сервера для управления доступом.
Обеспечивает автоматическое обновление токена доступа, в отличие от настройки по сравнению с Basic Authentication.
Позволяет предоставить ограниченный доступ к ресурсам без передачи учётных данных пользователя.
Быстрее и проще поддерживает многофакторную аутентификацию, в отличие от Basic Authentication.
Использует более простой процесс аутентификации, основанный на использовании токенов сессии.

Правильный ответ:
Позволяет предоставить ограниченный доступ к ресурсам без передачи учётных данных пользователя.
-----------------------------------------------------------------------------------------------------------------------------------------
Вы создаёте мобильное приложение, которое должно обращаться к вашему API от имени пользователя. Требуется обеспечить безопасность доступов и возможность отозвать доступ в любое время. Какова связь с фактором безопасности и управления доступом при выборе метода аутентификации для такой функциональности?

Варианты ответа:

JWT позволяет использовать долгосрочные токены для постоянного доступа без необходимости обновления.
OAuth 2.0 позволяет предоставить ограниченный доступ к ресурсам без передачи учётных данных пользователя.
Basic Authentication обеспечивает простой механизм передачи учётных данных, упрощая настройку доступа.
API ключи предоставляют централизованный контроль над доступом и позволяют легко отозвать права.
OpenID Connect фокусируется на аутентификации пользователей, обеспечивая безопасность входа и управление сессиями.

Правильный ответ:
OAuth 2.0 позволяет предоставить ограниченный доступ к ресурсам без передачи учётных данных пользователя.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API получает запрос на создание ресурса, которого уже существует, и выполнение этого запроса вызывает конфликт с текущим состоянием системы. Клиент должен быть уведомлён об ошибке, чтобы он понял, в каких причинах его запрос не может быть выполнен в данном контексте. Почему в этой ситуации именно код 409 является наиболее подходящим для обработки ошибки? Потому что 409…

Варианты ответа:

Сообщает о конфликте при попытке создать ресурсы, которых уже существует, но позволяет частично передать старую версию.
Означает конфликт с существующим ресурсом, однако сервер всё равно продолжает обработку, сохраняя обе версии одновременно.
Сигнализирует, что ресурс с тем же идентификатором, что и сервер, автоматически обновляет оба ресурса.
Указывает на конфликт с существующим ресурсом: создание повторной копии невозможно без изменения данных.
Говорит о конфликте, когда ресурс имеет одинаковые индексы, но при этом создаётся новая запись в базе вместо дублирования.

Правильный ответ:
Указывает на конфликт с существующим ресурсом: создание повторной копии невозможно без изменения данных.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваша микросервисная система обрабатывает заказы в режиме реального времени. Разные узлы могут одновременно обновлять одни и те же заказы. При этом клиенты порой делают повторные запросы PUT или PATCH, пытаясь гарантированно применить изменения, а также повторяют запросы после таймаута. Вам нужно обеспечить идемпотентность и избегать блоков, т.е. НЗ-которые один узел может передать изменения другому, нагрузка согласованности данных. Какой подход к CRUD-операциям позволяет эффективно поддерживать идемпотентность и управление конкурентными обновлениями в распределённой среде?

Варианты ответа:

Использовать простые PUT-запросы без версий ресурсов, позволяя любому узлу передать поля неизменного от текущего состояния.
Отключить частичное обновление (PATCH) и всегда создавать новые ресурсы при изменении, избегая обновлений операций над одним заказом.
Разрешить клиентам отправлять дубликат запросов POST для актуальной информации, полагаясь на уникальную ключевую в теге заголовка.
Хранить все изменения в очереди и выполнять их последовательно на одном узле, исключая параллельную обработку.
Применять PUT с условиями заголовками, чтобы при конфликте версии сервер отклонял повторные запросы или запросы с устаревшими данными.

Правильный ответ:
Применять PUT с условиями заголовками, чтобы при конфликте версии сервер отклонял повторные запросы или запросы с устаревшими данными.
-----------------------------------------------------------------------------------------------------------------------------------------
При выполнении массового обновления профилей пользователей методом PUT некоторые клиенты получают ошибку. Разные результаты при повторных запросах, хотя метод PUT должен быть идемпотентным. Нужно определить, какие факторы могут вызывать такие непредсказуемые результаты, и как они связаны с принципом идемпотентности.

Варианты ответа:

Наличие кэширования, из-за которого сервер возвращает устаревшие данные.
Некорректная обработка заголовка Content-Type, из-за чего сервер игнорирует некоторые параметры.
Параллельная обработка PUT-запросов, вызывающая несогласованность данных.
Метод PUT не поддерживает повторные запросы на массовое обновление.
Отсутствие уникального идентификатора, что приводит к созданию новых записей.

Правильный ответ:
3. Параллельная обработка PUT-запросов, вызывающая несогласованность данных.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API позволяет удалять заказы клиентов. При удалении заказа дочерние данные (например, связанные товары) не удаляются, что нарушает целостность базы данных. Вам нужно устранить эту проблему. Какой подход вы выберете для сохранения целостности данных при удалении зависимых ресурсов?

Варианты ответа:

Переключить метод DELETE на PATCH, чтобы обновить статус записей.
Переключиться на пометку заказов как удалённых, без их физического удаления.
Настроить каскадное удаление для связанных ресурсов.
Реализовать проверку зависимых данных перед удалением.
Установить для дочерних записей статус "без родителя".

Правильный ответ:
Настроить каскадное удаление для связанных ресурсов.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API должен поддерживать массовую рассылку уведомлений в реальном времени для десятков тысяч клиентов. Использование прямых WebSocket-соединений вызывает чрезмерную нагрузку на сервер. Вам нужно выбрать правильное решение, которое решает проблему масштабирования и обеспечивает высокую доступность.

Варианты ответа:

Переключиться на SSE, чтобы уменьшить нагрузку от двусторонних соединений.
Разделить сервер на несколько экземпляров и использовать балансировщик нагрузки.
Использовать брокер сообщений, таких как RabbitMQ или Kafka, для управления уведомлениями.
Применять шардирование клиентов на основе их идентификаторов.
Использовать Webhooks вместо WebSocket для масштабируемости.

Правильный ответ:
Использовать брокер сообщений, таких как RabbitMQ или Kafka, для управления уведомлениями.
-----------------------------------------------------------------------------------------------------------------------------------------
Вы разрабатываете API с десятками методов и несколькими версиями. Требуется поддерживать автоматизированную документацию, которая упрощает тестирование API, а также интеграцию с инструментами разработки. Какой подход вы выберете для автоматизации документирования API?

Варианты ответа:

Использование аннотаций кода для автоматической генерации спецификаций OpenAPI.
Автоматическая генерация документации на основе тестов API (contract testing).
Наличие пользовательского интерфейса (UI), отображающего состояние API в реальном времени.
Поддержка нескольких версий спецификаций API с помощью инструментов версионирования.
Автоматическое преобразование спецификаций OpenAPI в SDK для различных языков программирования.

Правильный ответ:
Использование аннотаций кода для автоматической генерации спецификаций OpenAPI.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API должен быть совместим с клиентами, которые работают с различными форматами данных. У некоторых клиентов установлены устаревшие системы, принимающие только XML, тогда как другие используют современные приложения, работающие с JSON. Вы хотите, чтобы сервер оставался универсальным, позволяя клиентам выбирать формат ответа. При этом нужно учесть REST-подход и оптимальную поддержку контент-негатиации. Какой из перечисленных ниже, самый оптимальный способ организации API, дающий возможность клиенту выбирать предпочтительный формат данных в ответе?

Варианты ответа:

Использовать параметр URL.
Определить формат ответа на основе выбранного клиентом соответствующего IP-адреса.
Использовать для этого параметр query.
Использовать заголовок Accept HTTP-запроса.
Предоставить разные эндпоинты для каждого формата.

Правильный ответ:
Использовать заголовок Accept HTTP-запроса.
-----------------------------------------------------------------------------------------------------------------------------------------
Вы реализуете JWT для аутентификации пользователей в вашем API. Вам необходимо настроить механизм управления сроком действия токенов, чтобы обеспечить баланс между безопасностью и удобством пользователей. Какой подход использовать для работы с экспирацией токенов JWT?

Варианты ответа:

Увеличить срок действия токена, чтобы избежать частых переавторизаций пользователей.
Использовать один общий токен без срока действия для всех пользователей, которые его применяют.
Установить короткий срок действия токена и использовать refresh-токены для продления сеанса пользователя.
Хранить время жизни токена на стороне клиента при необходимости продлевать его вручную.
Использовать симметричное шифрование токена, чтобы не проверять его истечение времени на стороне сервера.

Правильный ответ:
Установить короткий срок действия токена и использовать refresh-токены для продления сеанса пользователя.
-----------------------------------------------------------------------------------------------------------------------------------------
Вы разрабатываете высоконагруженный GraphQL API и приложение обмена сообщениями, где требуется мгновенное уведомление о новых сообщениях и статусе пользователей (онлайн/офлайн). При этом часть клиентов (например, мобильные) ограничены в ресурсах и не могут часто опрашивать сервер (polling). Вы также хотите извлечь лишнюю нагрузку на инфраструктуру, так как постоянные запросы Query увеличивают нагрузку. Нужно обеспечить реальное время (real-time) получения данных, сохраняя при этом гибкость и масштабируемость сервера. Какой из методов GraphQL оптимально применять для организации двунаправленной связи между сервером и клиентами, позволяющей передавать обновления по мере их появления?

Варианты ответа:

Resolver в GraphQL.
Query в GraphQL.
Directive в GraphQL.
Mutation в GraphQL.
Subscription в GraphQL.

Правильный ответ:
Subscription в GraphQL.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API обслуживает тысячи клиентов, и вы замечаете, что несколько из них отправляют аномально большое количество запросов в короткий промежуток времени. Это негативно влияет на производительность и приводит к сбоям в обработке запросов других клиентов. Вам нужно внедрить гибкое ограничение нагрузки через API Gateway, которое будет учитывать:

Идентификацию клиента (например, через токены).
Дифференциацию прав (например, VIP-клиенты могут отправлять больше запросов).
Мгновенную блокировку клиента, нарушающих лимиты.
Как настроить API Gateway для решения этой задачи?

Варианты ответа:

Ограничить доступ к API для всех клиентов, кроме заранее определённых групп.
Настроить IP-блокировку для всех клиентов, превышающих лимиты.
Использовать кэширование для временного хранения запросов и уменьшения нагрузки.
Добавить права для обработки VIP-клиентов через кастомные политики API Gateway.
Сформировать функцию rate-limiting с динамическими лимитами, привязанными к идентификаторам клиентов.

Правильный ответ:
Сформировать функцию rate-limiting с динамическими лимитами, привязанными к идентификаторам клиентов.
-----------------------------------------------------------------------------------------------------------------------------------------
Ваш API состоит из 15 конечных точек, каждая из которых поддерживает более 20 параметров. Клиенты жалуются, что API слишком сложен в использовании, поскольку приходится изучать десятки параметров, из которых только часть действительно актуальна для каждого конкретного случая. Вы хотите внедрить механизм, чтобы упростить процесс использования API. Какой из подходов вы выберете для управления сложностью API и улучшения взаимодействия с клиентами?

Некоторые параметры кода не используются, но важны для одной команды.
Некоторые параметры решают проблему, но важны для одной команды.
Код API содержит повторяющуюся бизнес-логику, что увеличивает сложность тестирования.
Обновление функциональности занимает много времени из-за отсутствия автоматизации.
Какой самый оптимальный подход для управления сложностью API, сохраняя поддержку поддоменов и улучшая пользовательский опыт?

Варианты ответа:

Объединить функции в отдельные модули и использовать их для генерации конечных точек динамически.
Создать отдельный API Gateway для маршрутизации запросов и упрощения подключения к сложным версиям конечных точек.
Внедрить кэширование запросов и уменьшить использование сервера, не меняя структуру API.
Удалить неиспользуемые параметры и реорганизовать логику конечных точек, сохранив редкие параметры через feature flags.
Реализовать универсальную конечную точку с поддержкой выборочных параметров, чтобы сократить количество конечных точек.

Правильный ответ:
Удалить неиспользуемые параметры и реорганизовать логику конечных точек, сохранив редкие параметры через feature flags.
-----------------------------------------------------------------------------------------------------------------------------------------




